pipeline {
    agent { label 'linux-docker-agent' }

    parameters {
        string(name: 'TARGET', defaultValue: 'test.delta.sbrf.ru-nginx', description: '–¶–µ–ª—å –¥–µ–ø–ª–æ—è –∏–∑ —Ñ–∞–π–ª–∞ hosts.yaml')
        string(name: 'API_KEY', defaultValue: '', description: 'API KEY for NVD')
        string(name: 'CHECK_JENKINSFILE_PATH', defaultValue: 'Jenkinsfile', description: 'Path to Jenkinsfile for analysis')
    }

    environment {
        HOSTS_FILE = 'nginx_deploy/hosts.yml'
        JENKINS_URL = 'http://localhost:8080'
        JENKINS_USER = 'admin'
        JENKINS_TOKEN = credentials('token_admin')
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/latypovavictoria/masters_degree.git', branch: 'main'
            }
        }

        stage('Install Requirements') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                        python3 -m pip install --upgrade pip
                        pip3 install requests junit-xml
                        pip3 install junitparser
                    '''
                    } else {
                        bat '''
                          python -m pip install --upgrade pip
                          pip install requests junit-xml
                          pip install junitparser
                    '''
                    }
                }
            }
        }

        stage('Security Scan') {
            steps {
                securityAnalyzer(
                        analyzeJenkinsfile: true,
                        checkPlugins: true,
                        jenkinsfilePath: 'Jenkinsfile',
                        jenkinsUrl: env.JENKINS_URL,
                        jenkinsUser: env.JENKINS_USER,
                        jenkinsToken: env.JENKINS_TOKEN,
                        nvdApiKey: "${API_KEY}"
                )
            }
        }

        stage('Publish Allure Report') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                            mkdir allure-results
                            cp result.xml allure-results
                            cp plugin_vuln_report.xml allure-results
                        '''
                    } else {
                        bat '''
                            mkdir allure-results
                            copy result.xml allure-results
                            copy plugin_vuln_report.xml allure-results
                        '''
                    }
                    allure([
                            includeProperties: false,
                            jdk: '',
                            results: [[path: 'allure-results']]
                    ])
                }
                junit 'plugin_vuln_report.xml'
                junit 'result.xml'
            }
        }

        stage('Parse Host Info') {
            steps {
                script {
                    def parsed = readYaml file: "${env.HOSTS_FILE}"
                    def config = parsed[params.TARGET]

                    if (!config) {
                        error "‚ùå –¶–µ–ª—å '${params.TARGET}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    }

                    env.SSH_CONNECT = config.connect
                    env.SSH_CRED_ID = config.credID
                    env.DEPLOY_TYPE = config.typeDeploy
                }
            }
        }

        stage('Deploy') {
            steps {
                sshagent([env.SSH_CRED_ID]) {
                    script {
                        switch (env.DEPLOY_TYPE) {
                            case 'nginx':
                                if (isUnix()) {
                                        sh """
                                        ssh -o StrictHostKeyChecking=no ${env.SSH_CONNECT} '
                                            echo "[*] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ NGINX"
                                            sudo systemctl restart nginx || sudo nginx
                                        '
                                    """
                                }
                                else {
                                    bat """
                                        ssh -o StrictHostKeyChecking=no ${env.SSH_CONNECT} '
                                            echo "[*] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ NGINX"
                                            sudo systemctl restart nginx || sudo nginx
                                        '
                                    """
                                }
                                break

                            case 'elk':
                                sh """
                                    ssh -o StrictHostKeyChecking=no ${env.SSH_CONNECT} '
                                        echo "[*] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ ELK"
                                        sudo systemctl restart elasticsearch
                                        sudo systemctl restart logstash
                                        sudo systemctl restart kibana
                                    '
                                """
                                break
                            default:
                                error "üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–ø–ª–æ—è: ${env.DEPLOY_TYPE}"
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –¥–µ–ø–ª–æ–π –¥–ª—è ${params.TARGET}"
        }
        failure {
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –Ω–∞ ${params.TARGET}"
        }
        always {
            archiveArtifacts artifacts: '*.json', fingerprint: true
        }
    }
}
