pipeline {
    agent { label 'linux-docker-agent' }

    environment {
        JENKINS_URL = 'http://host.docker.internal:8080'
        JENKINS_USER = 'admin'
        JENKINS_TOKEN = credentials('token_admin')
    }


    parameters {
        string(name: 'API_KEY', defaultValue: '', description: 'API KEY for NVD')
        string(name: 'CHECK_JENKINSFILE_PATH', defaultValue: 'Jenkinsfile', description: 'Path to Jenkinsfile for analysis')
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/latypovavictoria/masters_degree.git', branch: 'main'
            }
        }

        stage('Install Requirements') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                        python3 -m pip install --upgrade pip
                        pip3 install requests junit-xml
                        pip3 install junitparser
                    '''
                    } else {
                        bat '''
                          python -m pip install --upgrade pip
                          pip install requests junit-xml
                          pip install junitparser
                    '''
                    }
                }
            }
        }

        stage('Run Plugin CVE Check') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                        python3 scripts_reports/plugin_check.py "$JENKINS_URL" "$JENKINS_USER" "$JENKINS_TOKEN" "${API_KEY}"
                    '''
                    } else {
                        bat '''
                          python scripts_reports/plugin_check.py "%JENKINS_URL%" "%JENKINS_USER%" "%JENKINS_TOKEN%" "%API_KEY%"
                    '''
                    }
                }
            }
        }

        stage('Analyze Jenkinsfile') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                        python3 scripts_reports/analyze_jenkinsfile.py "${CHECK_JENKINSFILE_PATH}"
                    '''
                    } else {
                        bat '''
                          python scripts_reports/analyze_jenkinsfile.py "%CHECK_JENKINSFILE_PATH%"
                    '''
                    }
                }
            }
        }

        stage('Generate JUnit Report') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                        python3 scripts_reports/generate_junit.py
                    '''
                    } else {
                        bat '''
                          python scripts_reports/generate_junit.py
                    '''
                    }
                }
            }
        }

        stage('Publish Allure Report') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                            mkdir allure-results
                            cp result.xml allure-results
                            cp plugin_vuln_report.xml allure-results
                        '''
                    } else {
                        bat '''
                            mkdir allure-results
                            copy result.xml allure-results
                            copy plugin_vuln_report.xml allure-results
                        '''
                    }
                    allure([
                            includeProperties: false,
                            jdk: '',
                            results: [[path: 'allure-results']]
                    ])
                }
                junit 'plugin_vuln_report.xml'
                junit 'result.xml'
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '*.json', fingerprint: true
        }
    }
}
